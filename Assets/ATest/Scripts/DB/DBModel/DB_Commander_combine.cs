using System.Collections.Generic; 

/// <summary>
/// THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!
/// </summary>
public class DB_Commander_combine : IDB_BaseInt
{
	const string SQL = @"select _index, Id, Comment, Combo_Type, Combo_Name, combo_text1, combo_text2, combo_text3, Combo_Unit0, Combo_Unit1, Combo_Unit2, Combo_Unit3, Combo_Unit4, Combo_Unit5, Combo_Effect, Combo_Effect_Param0, Combo_Effect_Param1, Combo_Effect_Param2, Combo_Effect_Param3, Combo_Effect_Param4, Combo_Effect_Param5 from conf_commander_combine";

	/// <summary>
	///序号
	/// </summary>
	public int _index { get; set; }
	/// <summary>
	///组合id
	/// </summary>
	public int Id { get; set; }
	/// <summary>
	///开发备注
	/// </summary>
	public string Comment { get; set; }
	/// <summary>
	///组合类型
	/// </summary>
	public int Combo_Type { get; set; }
	/// <summary>
	///组合名
	/// </summary>
	public string Combo_Name { get; set; }
	/// <summary>
	///组合说明1：组合类型为1时，文本表现为combo_name|combo_text1|组合单位名字|该指挥官名字|combo_text2|效果参数0对应的战术or技能名字|combo_text3|效果参数1对应的战术or技能名字
	/// </summary>
	public string Combo_text1 { get; set; }
	/// <summary>
	///组合说明2:组合类型为2时，文本表现为combo_name|combo_text1|组合单位的名字|combo_text2|效果参数0对应的属性名字|combo_text3|效果参数1对应的数值
	/// </summary>
	public string Combo_text2 { get; set; }
	/// <summary>
	///组合说明3
	/// </summary>
	public string Combo_text3 { get; set; }
	/// <summary>
	///所需组合单位0
	/// </summary>
	public int Combo_Unit0 { get; set; }
	/// <summary>
	///所需组合单位1
	/// </summary>
	public int Combo_Unit1 { get; set; }
	/// <summary>
	///所需组合单位2
	/// </summary>
	public int Combo_Unit2 { get; set; }
	/// <summary>
	///所需组合单位3
	/// </summary>
	public int Combo_Unit3 { get; set; }
	/// <summary>
	///所需组合单位4
	/// </summary>
	public int Combo_Unit4 { get; set; }
	/// <summary>
	///所需组合单位5
	/// </summary>
	public int Combo_Unit5 { get; set; }
	/// <summary>
	///组合效果
	/// </summary>
	public int Combo_Effect { get; set; }
	/// <summary>
	///效果参数0
	/// </summary>
	public int Combo_Effect_Param0 { get; set; }
	/// <summary>
	///效果参数1
	/// </summary>
	public int Combo_Effect_Param1 { get; set; }
	/// <summary>
	///效果参数2
	/// </summary>
	public int Combo_Effect_Param2 { get; set; }
	/// <summary>
	///效果参数3
	/// </summary>
	public int Combo_Effect_Param3 { get; set; }
	/// <summary>
	///效果参数4
	/// </summary>
	public int Combo_Effect_Param4 { get; set; }
	/// <summary>
	///效果参数5
	/// </summary>
	public int Combo_Effect_Param5 { get; set; }

	static Dictionary<int, IDB_BaseInt> LoadDB()
	{
		Dictionary<int, IDB_BaseInt> tmp = new Dictionary<int, IDB_BaseInt>();
		DBHelper.Instance.Query(SQL, (reader) =>
		{
			if (reader == null) return;

			while (reader.Read())
			{
				DB_Commander_combine module = new DB_Commander_combine()
				{
					_index		 = reader.GetInt32(0),
					Id		 = reader.GetInt32(1),
					Comment		 = reader.GetString(2),
					Combo_Type		 = reader.GetInt32(3),
					Combo_Name		 = reader.GetString(4),
					Combo_text1		 = reader.GetString(5),
					Combo_text2		 = reader.GetString(6),
					Combo_text3		 = reader.GetString(7),
					Combo_Unit0		 = reader.GetInt32(8),
					Combo_Unit1		 = reader.GetInt32(9),
					Combo_Unit2		 = reader.GetInt32(10),
					Combo_Unit3		 = reader.GetInt32(11),
					Combo_Unit4		 = reader.GetInt32(12),
					Combo_Unit5		 = reader.GetInt32(13),
					Combo_Effect		 = reader.GetInt32(14),
					Combo_Effect_Param0		 = reader.GetInt32(15),
					Combo_Effect_Param1		 = reader.GetInt32(16),
					Combo_Effect_Param2		 = reader.GetInt32(17),
					Combo_Effect_Param3		 = reader.GetInt32(18),
					Combo_Effect_Param4		 = reader.GetInt32(19),
					Combo_Effect_Param5		 = reader.GetInt32(20),
				};
				tmp.Add(module.Id, module);
			}
		});
		return tmp;
	}
}
