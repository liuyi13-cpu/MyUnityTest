using System.Collections.Generic; 

/// <summary>
/// THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!
/// </summary>
public class DB_Strategy_fortress : IDB_BaseIntDouble
{
	const string SQL = @"select _index, strategy_id, level, comment, cost_id, cost_num, fortress_title, fortress_make, fortress_time, fortress_limit, lv_limit, lv_limit_num from conf_strategy_fortress";

	/// <summary>
	///序号
	/// </summary>
	public int _index { get; set; }
	/// <summary>
	///功能id
	/// </summary>
	public int Strategy_id { get; set; }
	/// <summary>
	///等级
	/// </summary>
	public int Level { get; set; }
	/// <summary>
	///开发备注
	/// </summary>
	public string Comment { get; set; }
	/// <summary>
	///升级消耗货币id（101 游戏币 124 战略大作战货币）
	/// </summary>
	public int Cost_id { get; set; }
	/// <summary>
	///消耗货币数量
	/// </summary>
	public int Cost_num { get; set; }
	/// <summary>
	///标题
	/// </summary>
	public string Fortress_title { get; set; }
	/// <summary>
	///要塞产出（周期到时，领取货币总量）
	/// </summary>
	public int Fortress_make { get; set; }
	/// <summary>
	///税收周期/秒
	/// </summary>
	public int Fortress_time { get; set; }
	/// <summary>
	///储存上限
	/// </summary>
	public int Fortress_limit { get; set; }
	/// <summary>
	///升级条件(1:占领防线数量。2：要塞等级。-1无法升级)
	/// </summary>
	public int Lv_limit { get; set; }
	/// <summary>
	///升级条件数量（-1：该等级无法升级）
	/// </summary>
	public int Lv_limit_num { get; set; }

	static Dictionary<int, Dictionary<int, IDB_BaseIntDouble>> LoadDB()
	{
		Dictionary<int, Dictionary<int, IDB_BaseIntDouble>> tmp = new Dictionary<int, Dictionary<int, IDB_BaseIntDouble>>();
		DBHelper.Instance.Query(SQL, (reader) =>
		{
			if (reader == null) return;

			while (reader.Read())
			{
				DB_Strategy_fortress module = new DB_Strategy_fortress()
				{
					_index		 = reader.GetInt32(0),
					Strategy_id		 = reader.GetInt32(1),
					Level		 = reader.GetInt32(2),
					Comment		 = reader.GetString(3),
					Cost_id		 = reader.GetInt32(4),
					Cost_num		 = reader.GetInt32(5),
					Fortress_title		 = reader.GetString(6),
					Fortress_make		 = reader.GetInt32(7),
					Fortress_time		 = reader.GetInt32(8),
					Fortress_limit		 = reader.GetInt32(9),
					Lv_limit		 = reader.GetInt32(10),
					Lv_limit_num		 = reader.GetInt32(11),
				};
				if (!tmp.ContainsKey(module.Strategy_id))
				{
					var tmpsub = new Dictionary<int, IDB_BaseIntDouble>();
					tmp.Add(module.Strategy_id, tmpsub);
				}
				tmp[module.Strategy_id].Add(module.Level, module);
			}
		});
		return tmp;
	}
}
