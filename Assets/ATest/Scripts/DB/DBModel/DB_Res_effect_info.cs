using System.Collections.Generic; 

/// <summary>
/// THIS SOURCE CODE WAS AUTO-GENERATED BY TOOL, DO NOT MODIFY IT!
/// </summary>
public class DB_Res_effect_info : IDB_BaseIntDouble
{
	const string SQL = @"select _index, id, load_order, name, comment, mesh_name, type, hang_point, is_flow, delay_time, logic_type, logic_param1 from conf_res_effect_info";

	/// <summary>
	///序号
	/// </summary>
	public int _index { get; set; }
	/// <summary>
	///特效ID
	/// </summary>
	public int Id { get; set; }
	/// <summary>
	///加载次序
	/// </summary>
	public int Load_order { get; set; }
	/// <summary>
	///特效名字
	/// </summary>
	public string Name { get; set; }
	/// <summary>
	///备注
	/// </summary>
	public string Comment { get; set; }
	/// <summary>
	///路径
	/// </summary>
	public string Mesh_name { get; set; }
	/// <summary>
	///类型
	/// </summary>
	public int Type { get; set; }
	/// <summary>
	///挂载点
	/// </summary>
	public string Hang_point { get; set; }
	/// <summary>
	///是否跟随
	/// </summary>
	public int Is_flow { get; set; }
	/// <summary>
	///延迟时间
	/// </summary>
	public float Delay_time { get; set; }
	/// <summary>
	///逻辑类型
	/// </summary>
	public int Logic_type { get; set; }
	/// <summary>
	///逻辑参数
	/// </summary>
	public string Logic_param1 { get; set; }

	static Dictionary<int, Dictionary<int, IDB_BaseIntDouble>> LoadDB()
	{
		Dictionary<int, Dictionary<int, IDB_BaseIntDouble>> tmp = new Dictionary<int, Dictionary<int, IDB_BaseIntDouble>>();
		DBHelper.Instance.Query(SQL, (reader) =>
		{
			if (reader == null) return;

			while (reader.Read())
			{
				DB_Res_effect_info module = new DB_Res_effect_info()
				{
					_index		 = reader.GetInt32(0),
					Id		 = reader.GetInt32(1),
					Load_order		 = reader.GetInt32(2),
					Name		 = reader.GetString(3),
					Comment		 = reader.GetString(4),
					Mesh_name		 = reader.GetString(5),
					Type		 = reader.GetInt32(6),
					Hang_point		 = reader.GetString(7),
					Is_flow		 = reader.GetInt32(8),
					Delay_time		 = reader.GetFloat(9),
					Logic_type		 = reader.GetInt32(10),
					Logic_param1		 = reader.GetString(11),
				};
				if (!tmp.ContainsKey(module.Id))
				{
					var tmpsub = new Dictionary<int, IDB_BaseIntDouble>();
					tmp.Add(module.Id, tmpsub);
				}
				tmp[module.Id].Add(module.Load_order, module);
			}
		});
		return tmp;
	}
}
